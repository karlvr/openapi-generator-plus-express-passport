{{#ifvex 'convert-to-literal-type'}}
export type {{className name}} = {{{vendorExtensions.convert-to-literal-type}}}
{{else}}
{{>frag/schemaDocumentation}}
{{#if (isMultipartSchema .)}}
export interface {{className name}} extends Request {
	body: MultipartFormData.Body;
}
{{else}}
export interface {{className name}}{{#if parents}} extends {{#each parents}}{{>frag/extends extends=nativeType.parentType}}{{#hasMore}}, {{/hasMore}}{{/each}}{{/if}}{{!--
--}}{{#if implements}}{{#unless parents}} extends{{else}},{{/unless}} {{#each implements}}{{>frag/extends extends=nativeType}}{{#hasMore}}, {{/hasMore}}{{/each}}{{/if}} {
{{>frag/discriminator}}
{{#if additionalProperties}}
	[key: string]: {{{additionalProperties.component.nativeType}}} | undefined;

{{/if}}
{{#if component}}
	[key: string]: {{{component.nativeType}}};

{{/if}}
{{#each properties}}
	{{>frag/propertyDocumentation memberOf=../name}}
	{{#if readOnly}}readonly {{/if}}{{{quoteInvalidIdentifier serializedName}}}{{#unless required}}?{{/unless}}: {{{nativeType.serializedType}}};
{{/each}}
}
{{/if}}
{{/ifvex}}
{{>modelNestedModels}}
